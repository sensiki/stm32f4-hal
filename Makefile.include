# STM32 Makefile for GNU toolchain and openocd
#
# This Makefile fetches the Cube firmware package from ST's' website.
# This includes: CMSIS, STM32 HAL, BSPs, USB drivers and examples.
#
# Usage:
#	make cube		Download and unzip Cube firmware
#	make program		Flash the board with OpenOCD
#	make openocd		Start OpenOCD
#	make debug		Start GDB and attach to OpenOCD
#	make dirs		Create subdirs like obj, dep, ..
#	make template		Prepare a simple example project in this dir
#
# Copyright	2015 Steffen Vogel
# License	http://www.gnu.org/licenses/gpl.txt GNU Public License
# Author	Steffen Vogel <post@steffenvogel.de>
# Link		http://www.steffenvogel.de
#
# edited for the STM32F4-Discovery

# A name common to all output files (elf, map, hex, bin, lst)
TOP_DIR   := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# Take a look into $(CUBE_DIR)/Drivers/BSP for available BSPs
# name needed in upper case and lower case
BOARD      = STM32F429I-Discovery
BOARD_UC   = STM32F429I_DISCO

OCDFLAGS   = -f board/stm32f4discovery.cfg
GDBFLAGS   =

# MCU family and type in various capitalizations o_O
MCU_FAMILY = stm32f4xx
MCU_LC     = stm32f429xx
MCU_MC     = STM32F429xx
MCU_UC     = STM32F429ZI

HSE_VALUE = 25000000L

# path of the ld-file inside the example directories
LDFILE     = Templates/SW4STM32/$(BOARD_UC)/$(MCU_UC)Tx_FLASH.ld

# libs file 
ROS = 1

STM32LIB   = stm32cubef4
ROSLIB	   = ros

# Directories
OCD_DIR    = /usr/share/openocd/scripts

CUBE_DIR   = $(TOP_DIR)Libs/cube
ROS_DIR    = $(TOP_DIR)Libs/RosLibs

BSP_DIR    = $(CUBE_DIR)/Drivers/BSP/$(BOARD_UC)
HAL_DIR    = $(CUBE_DIR)/Drivers/STM32F4xx_HAL_Driver
CMSIS_DIR  = $(CUBE_DIR)/Drivers/CMSIS

DEV_DIR    = $(CMSIS_DIR)/Device/ST/STM32F4xx

# that's it, no need to change anything below this line!

###############################################################################
# Toolchain

PREFIX     = arm-none-eabi
CC         = $(PREFIX)-gcc
CCP        = $(PREFIX)-g++
AR         = $(PREFIX)-ar
OBJCOPY    = $(PREFIX)-objcopy
OBJDUMP    = $(PREFIX)-objdump
SIZE       = $(PREFIX)-size
GDB        = $(PREFIX)-gdb

OCD        = openocd
FLASH      = st-flash


###############################################################################
# Options

# Defines
DEFS       = -D$(MCU_MC) -DUSE_HAL_DRIVER -DHSE_VALUE=$(HSE_VALUE)

# Debug specific definitions for semihosting
DEFS       += -DUSE_DBPRINTF

# Include search paths (-I)
INCS       = -ISrc
INCS 	  += -IHardware
INCS 	  += -ISystem
INCS      += -I$(BSP_DIR)
INCS      += -I$(CMSIS_DIR)/Include
INCS      += -I$(DEV_DIR)/Include
INCS      += -I$(HAL_DIR)
INCS      += -I$(HAL_DIR)/Inc
INCS      += -I$(ROS_DIR)/

# Library search paths
LIBS       = -L$(CMSIS_DIR)/Lib

# Compiler flags
#CFLAGS     = -Wall -g -std=c99 -Os
CFLAGS     = -Wall -g -Os
CFLAGS    += -mlittle-endian -mcpu=cortex-m4 -march=armv7e-m -mthumb
CFLAGS    += -mfpu=fpv4-sp-d16 -mfloat-abi=hard
CFLAGS    += -ffunction-sections -fdata-sections
CFLAGS    += $(INCS) $(DEFS)

# Linker flags
LDFLAGS    = -Wl,--gc-sections -Wl,-Map=$(TARGET).map $(LIBS) -T$(MCU_LC).ld

# Enable Semihosting
LDFLAGS   += --specs=rdimon.specs -lc -lrdimon
LDFLAGS   += -L$(HAL_DIR)
LDFLAGS   += -l$(STM32LIB)

ifeq ($(ROS), 1)
LDFLAGS   += -L$(ROS_DIR)
LDFLAGS   += -l$(ROSLIB)
endif


# Source search paths


# Prettify output
V = 0
ifeq ($V, 0)
	Q = @
	P = > /dev/null
endif


###################################################

.PHONY: all dirs program debug template clean


# Prettify output
V = 0
ifeq ($V, 0)
	Q = @
	P = > /dev/null
endif


###################################################

.PHONY: all dirs program debug template clean

ifeq ($(ROS), 1)
all: stm32f4libs roslibs $(TARGET).bin
stm32f4libs:
	$(MAKE) -C $(HAL_DIR)
roslibs:
	$(MAKE) -C $(ROS_DIR)
else
all: stm32f4libs $(TARGET).bin
stm32f4libs:
	$(MAKE) -C $(HAL_DIR)
endif


-include $(DEPS)

%.o : %.c 
	$(CC) $(CFLAGS) -c -o $@ $< 

%.o : %.cpp 
	$(CCP) $(CFLAGS) -c -o $@ $< 

ifeq ($(ROS), 1)
$(TARGET).elf: $(OBJS) $(HAL_DIR)/libstm32cubef4.a $(ROS_DIR)/libros.a
	@echo "[LD]      $(TARGET).elf"
	$Q$(CC) $(CFLAGS) $(LDFLAGS) Src/startup_$(MCU_LC).s $^ -o $@
	@echo "[OBJDUMP] $(TARGET).lst"
	$Q$(OBJDUMP) -St $(TARGET).elf >$(TARGET).lst
	@echo "[SIZE]    $(TARGET).elf"
	$(SIZE) $(TARGET).elf
else
$(TARGET).elf: $(OBJS) $(HAL_DIR)/libstm32cubef4.a
	@echo "[LD]      $(TARGET).elf"
	$Q$(CC) $(CFLAGS) $(LDFLAGS) Src/startup_$(MCU_LC).s $^ -o $@
	@echo "[OBJDUMP] $(TARGET).lst"
	$Q$(OBJDUMP) -St $(TARGET).elf >$(TARGET).lst
	@echo "[SIZE]    $(TARGET).elf"
	$(SIZE) $(TARGET).elf
endif


$(TARGET).bin: $(TARGET).elf
	@echo "[OBJCOPY] $(TARGET).bin"
	$Q$(OBJCOPY) -O binary $< $@

openocd:
	$(OCD) -s $(OCD_DIR) $(OCDFLAGS)

program: all
	$(OCD) -s $(OCD_DIR) $(OCDFLAGS) -c "program $(TARGET).elf verify reset"

flash: $(TARGET).bin
	$(FLASH) write $(TARGET).bin 0x8000000


debug:
	@if ! nc -z localhost 3333; then \
		echo "\n\t[Error] OpenOCD is not running! Start it with: 'make openocd'\n"; exit 1; \
	else \
		$(GDB)  -ex "target extended localhost:3333" \
			-ex "monitor arm semihosting enable" \
			-ex "monitor reset halt" \
			-ex "load" \
			-ex "monitor reset init" \
			$(GDBFLAGS) $(TARGET).elf; \
	fi

template: cube 
	cp -ri $(CUBE_DIR)/Projects/$(BOARD)/Templates/Src 	  Src
	cp -ri $(CUBE_DIR)/Projects/$(BOARD)/Templates/Inc    Inc
	cp -i $(DEV_DIR)/Source/Templates/gcc/startup_$(MCU_LC).s Src
	cp -i $(CUBE_DIR)/Projects/$(BOARD)/$(LDFILE) $(MCU_LC).ld

clean:
	@echo "[RM]      $(TARGET).bin"; rm -f $(TARGET).bin
	@echo "[RM]      $(TARGET).elf"; rm -f $(TARGET).elf
	@echo "[RM]      $(TARGET).map"; rm -f $(TARGET).map
	@echo "[RM]      $(TARGET).lst"; rm -f $(TARGET).lst
	@echo "[RMDIR]   dep"          ; rm -fr dep
	@echo "[RMDIR]   obj"          ; rm -fr obj
	@echo "[RMDIR]   *.o"          ; rm -fr $(OBJS)

